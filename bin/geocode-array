#!/usr/bin/env python3

# -*- coding: utf-8 -*-
"""
CCT Geocode Project:
This code reads in a list of addresses in json or csv format, attempts to geocode these addresses with the ArcGIS and Nominatim geocoders,
compares the results from both geocoders and selects the best. Then it attempts to geocode the addresses with the 
CCT geocoder and returns the output from the CCT geocoder as well as the best result from the combination of ArcGIS and Nominatim
in json and csv format.
"""

import argparse
import logging

from geocode_array import API_key
from geocode_array import geocode_array, io_utils, STD_OUT, RESULT_KEY, INTERNAL_KEY, EXTERNAL_KEY

parser = argparse.ArgumentParser(
    description="geocode using an array of Geocoders. Example: $ geocode-array  "
                "--input_filename=sample.csv -output_filetype=csv "
                "--output_filename=out --key_file=key.json"
)
parser.add_argument("--input_filename", type=str, help="input filename eg: sample.csv")
parser.add_argument("--output_filename", type=str, help="output filename eg: sample_output.csv",
                    default=STD_OUT)
parser.add_argument("--key_file", type=str, help="your Google API Key in a json file", default=None)
parser.add_argument("--verbose", help="Turns on debug logging", action="store_true", default=False)
args = parser.parse_args()

input_filename = args.input_filename
output_filename = args.output_filename

# Setting up logging
log_level = logging.DEBUG if args.verbose else logging.INFO
logging.basicConfig(level=log_level,
                    format='%(asctime)s-%(module)s.%(funcName)s [%(levelname)s]: %(message)s')

if key_filename is not None:
    google_api_key = io_utils.get_api_key(key_filename)

inputs = tuple(io_utils.input_file_entries(input_filename))
result = {}

for add_ID, addr in inputs:
    if 'south africa' not in addr.lower():
        addr += ', South Africa'

    address_AG, lat_AG, lon_AG, d_AG = geocode_array.ArcGIS(addr)
    address_N, lat_N, lon_N, d_N = geocode_array.Nominatim(addr)

    compare_args = [address_AG, lat_AG, lon_AG, d_AG,
                    address_N, lat_N, lon_N, d_N,]
    compare_func = geocode_array.compare

    if key_filename is not None:
        try:
            logging.debug("API key detected, giving Google a go...")
            address_G, lat_G, lon_G, d_G = geocode_array.Google(addr)

            compare_func = geocode_array.compare_all
            compare_args += [address_G, lat_G, lon_G, d_G]
        except Exception as e:
            logging.error(f'Possible invalid API key - \n{e.__class__}:"{e}"')

    lat, lon, address_name, error = compare_func(*compare_args, add_ID)

    cct_address, cct_loc, cct_error = geocode_array.CCT(add_ID, addr)
    logging.debug(f"{cct_address, cct_loc, cct_error}")
    cct_lat, cct_long = [cct_loc.get(dim) if isinstance(cct_loc, dict) else None
                         for dim in ["y", "x"]]

    def _form_results_dict(lat, lon, address, error):
        return {
            "lat": float(lat) if lat is not None else None,
            "long": float(lon) if lat is not None else None,
            "address": str(address).replace(",", ""),
            "error": float(error) if error is not None else None
        }

    result[add_ID] = {
        RESULT_KEY: {
            EXTERNAL_KEY: _form_results_dict(lat, lon, address_name, error),
            INTERNAL_KEY: _form_results_dict(cct_lat, cct_long, cct_address, cct_error),
        }
    }

io_utils.output_data(result, output_filename)
